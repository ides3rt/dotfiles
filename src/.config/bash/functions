#!/usr/bin/env bash

Err() {
	printf '%s\n' "Err: $1" 1>&2
	return 1
}

up() {
	local Count
	for (( Count = 10#${1:-1}; Count > 0; Count-- )); {
		cd .. || break
	}
}

lspkg() { # [NAME] Inspired by TFL/LL
	local Count=1 File SFile Old_File Old_SFile Msg

	while [[ -n "$1" ]]; do
		case "$1" in
			-h|--help)
				read -d '' <<-EOF
					Usage: lspkg [OPTIONS] [GLOB]

					  -h, --help        - Display this help infomation.
					  -r, --raw         - Show tarball's full name.
					  -d, --dups        - Only show duplicate tarball(s).

				EOF

				printf '%s' "$REPLY"
				return 0 ;;

			-r|--raw)
				local Raw=1 ;;

			-d|--dups)
				local Dups=1 ;;

			--)
				shift
				break ;;

			-*)
				Err "$1: invaild option..."
				return 1 ;;

			*)
				break ;;
		esac
		shift
	done

	for File in /var/cache/pacman/pkg/$1*.tar.zst; {
		[[ -f $File ]] || return 1

		SFile="${File#/var/cache/pacman/pkg/}"
		SFile="${SFile/-[0-9]*}"

		if [[ $SFile == $Old_SFile ]]; then

			(( Count++ ))
			if (( Dups == 1 && Raw == 1 )); then
				Msg="${Old_File:-$File}"
				(( Count > 1 )) && printf '%s\n' "$Msg"
			fi

		else
			if (( Raw == 1 )); then
				Msg="${Old_File:-$File}"
			else
				Msg="${Old_SFile:-$SFile} - has $Count tarball(s)."
			fi

			if (( Dups == 1 )); then
				(( Count > 1 )) && printf '%s\n' "$Msg"
			else
				printf '%s\n' "$Msg"
			fi

			Count=1
		fi

		Old_SFile="$SFile"
		Old_File="$File"
	}
}

build() {
	# Errors checking.
	(( $# == 1 )) || { Err 'Need to specified a AUR...'; return 1; }

	# Set build dir.
	local BuildDir="${TMPDIR:-/tmp}/build-$SRANDOM"

	# Copy AUR to build dir.
	if cp -r "$1" "$BuildDir"; then
		# Build AUR.
		{ cd "$BuildDir" && makepkg -sir ;} || Err "Build '$1' failed..."
	else
		Err "failed to copy '$1' to '$TMPDIR'..."
	fi

	# Clean.
	cd "$OLDPWD" && rm -rf "$BuildDir"
}

log() {
	git --no-pager log --reverse --pretty=format:'%h: "%s"' "$@"
	printf '\n'
}

lq() { links https://lite.duckduckgo.com/lite/?q="$*"; }
