"Prepare XDG
if !exists('$XDG_CONFIG_HOME') | let $XDG_CONFIG_HOME="$HOME/.config" | endif
if !exists('$XDG_CACHE_HOME') | let $XDG_CACHE_HOME="$HOME/.cache" | endif

"XDG PATH
set runtimepath^=$XDG_CONFIG_HOME/vim

"Detecting file type
filetype on
filetype plugin on
filetype indent on

"Syntax
if has('syntax')
	"Enable syntax highlight
	syntax on

	if !has('gui_running')
		colorscheme ides3rt-v3
		set ttyfast
	endif

	"Only highlight number when `cursorline` is on
	set cursorlineopt=number
endif

"Use <space> as my <leader>
noremap <space> <nop>
let mapleader=" "

"Plugins variables
let g:Status = 0
let g:Textwidth = 1

"Plugins
source $XDG_CONFIG_HOME/vim/plugin/status.vim
source $XDG_CONFIG_HOME/vim/plugin/better-default.vim
source $XDG_CONFIG_HOME/vim/plugin/syntax.vim
source $XDG_CONFIG_HOME/vim/plugin/textwidth.vim

"Change pwd to open file's dir
set autochdir

"Indent
set autoindent

"Autoread when changes are from outside
set autoread

"Make <BACKSPACE> works
set backspace=indent,eol,start

"Disable bell
set belloff=all

"Copy existing indent
set copyindent

"Disable `:' history
set history=0

if has('extra_search')
	"Highlighted search
	set hlsearch

	"Highlight while search
	if has('reltime')
		set incsearch
	endif

	"Use <leader><space> to clear highlighting
	noremap <silent> <leader><space> :noh<CR>
endif

"Case insensitive
set ignorecase

"No double <SPACE> after period
set nojoinspaces

"It's only enable for backwards compatibility
if has('langmap')
	set nolangnoremap
	set nolangremap
endif

"Good performence boost
set lazyredraw

"When list characters
if system('id -u') != 0
	set listchars=tab:»→,trail:␣
	noremap <silent> <leader>ls :set list!<CR>
endif

"Don't auto load plugins
set noloadplugins

"Show the matching parent
set matchtime=0

"Don't check set() command
set nomodeline

"Don't use more() format
set nomore

"Incase someone want to use mouse
set mouse=a

"Set `nrformats' to recom' values
set nrformats=bin,hex

if has('linebreak')
	"Set `numberwidth` to 2
	set numberwidth=2

	"When `linebreak' is set
	set breakindent
endif

"I don't like to have `/usr/include`
set path=.,,**

"Don't allow :autocmd, shell and write commands
set secure

"Make DOS compatible with Unix [nvim(1) defaults]
if has('mksession')
	set sessionoptions=blank,buffers,curdir,folds,help,tabpages,slash,winsize,terminal,unix
	set viewoptions=folds,cursor,slash,unix,curdir
endif

"Set <TAB> to 4 spaces
set nosmarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4

"Disable some verbosity
set shortmess=filnxtToOFS

"Don't show commands [vim(1) default]
set noshowcmd

"When a bracket is inserted, briefly jump to the matching one
set showmatch

"Make cursor always at the middle of the screen
set sidescroll=0
set sidescrolloff=999
set scrolloff=999

"Always split using alternative side
set splitbelow
set splitright

"Don't move cursor to sol [nvim(1) default]
set nostartofline

"Don't create `swapfile`
set noswapfile

"Timeout
set notimeout
set ttimeout
set ttimeoutlen=0

"Make data store in `viminfo` as least as possible
if has('viminfo')
	set viminfo='0,:0,<0,@0,f0
	set viminfofile=$XDG_CACHE_HOME/vim/viminfo
endif

"Ignorecase when auto complete
set wildignorecase

"Use menu autocomplete
if has('wildmenu')
	set wildmenu
endif

"Don't wrap
set nowrap

"Disable auto commenting on newline
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

"Auto remove trailing whitespaces
autocmd BufWritePre * :%s/\s\+$//e

"Toggle `ignorecase`
noremap <silent> <leader>ic :set ignorecase!<CR>

"Toggle wrap
noremap <silent> <leader>sw :set wrap! linebreak!<CR>

"Center-, right-, or left-align one or more lines
noremap <silent> <leader>ac :center<CR>
noremap <silent> <leader>ar :right<CR>
noremap <silent> <leader>al :left<CR>

"When you open multiple files
noremap <silent> <leader>nn :next<CR>
noremap <silent> <leader>pp :prev<CR>

"https://stackoverflow.com/questions/5240473/in-vim-with-xclip-yank-to-clipboard
vnoremap <silent> <leader>y "yy <Bar> :call system('xclip -sel c', @y)<CR>

"Source vimrc
noremap <silent> <leader>rc :source $MYVIMRC<CR>
